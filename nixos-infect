#!/usr/bin/env bash

# NixOS Installation Script
# More info: https://github.com/elitak/nixos-infect

set -euo pipefail

# Constants
NIX_INSTALL_URL="${NIX_INSTALL_URL:-https://nixos.org/nix/install}"
DEFAULT_NIX_CHANNEL="nixos-unstable"
MIN_SWAP_SIZE_MB=512
NIXBLD_GROUP_ID=30000
NIXBLD_USER_PREFIX="nixbld"

# Global Variables
PROVIDER=""
DO_NET_CONF=""
NEW_ROOTFS_LABEL=""
ESP=""
GRUBDEV=""
ROOTFSDEV=""
ROOTFSTYPE=""
SWAPSHOW=""
ZRAMS_SWAP=true
SWAPCFG=""
NO_SWAP=false
NO_REBOOT=false

# Utility Functions
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

ensure_root() {
  if [[ "$(id -u)" -ne 0 ]]; then
    echo "ERROR: Must run as root."
    exit 1
  fi
}

autodetect_provider() {
  if [[ -e /etc/hetzner-build ]]; then
    PROVIDER="hetznercloud"
  elif [[ -e /etc/digitalocean ]]; then
    PROVIDER="digitalocean"
  elif [[ -e /etc/amazon ]]; then
    PROVIDER="amazon"
  fi
}

find_esp() {
  for dir in /boot/EFI /boot/efi /boot; do
    if [[ -d "$dir" && "$dir" == "$(df "$dir" --output=target | sed 1d)" ]]; then
      ESP=$(df "$dir" --output=source | sed 1d)
      break
    fi
  done

  if [[ -z "$ESP" ]]; then
    echo "ERROR: No ESP mount point found."
    exit 1
  fi

  for uuid in /dev/disk/by-uuid/*; do
    if [[ "$(readlink -f "$uuid")" == "$ESP" ]]; then
      ESP="$uuid"
      return
    fi
  done

  echo "ERROR: ESP UUID not found."
  exit 1
}

is_efi() {
  [[ -d /sys/firmware/efi ]]
}

is_x86_64() {
  [[ "$(uname -m)" == "x86_64" ]]
}

prepare_env() {
  if is_efi; then
    find_esp
  else
    for device in /dev/vda /dev/sda /dev/xvda /dev/nvme0n1; do
      if [[ -e "$device" ]]; then
        GRUBDEV="$device"
        break
      fi
    done
  fi

  ROOTFSDEV=$(findmnt / -o SOURCE -n)
  ROOTFSTYPE=$(findmnt / -o FSTYPE -n)

  export USER="root"
  export HOME="/root"

  mkdir -p -m 0755 /nix
}

install_dependencies() {
  local packages=("curl" "wget" "bzcat" "xzcat" "groupadd" "useradd" "ip" "awk" "cut" "df")
  local missing=()

  for pkg in "${packages[@]}"; do
    if ! command_exists "$pkg"; then
      missing+=("$pkg")
    fi
  done

  if [[ "${#missing[@]}" -ne 0 ]]; then
    echo "Installing missing packages: ${missing[*]}"
    if command_exists apt-get; then
      apt-get update
      apt-get install -y "${missing[@]}"
    elif command_exists yum; then
      yum install -y "${missing[@]}"
    elif command_exists dnf; then
      dnf install -y "${missing[@]}"
    else
      echo "ERROR: Package manager not supported."
      exit 1
    fi
  fi

  # Fix SSH host key permissions
  chmod 600 /etc/ssh/ssh_host_*_key
}

make_swap() {
  local swap_file
  swap_file=$(mktemp /tmp/nixos-infect.XXXXX.swp)
  dd if=/dev/zero of="$swap_file" bs=1M count="$MIN_SWAP_SIZE_MB"
  chmod 0600 "$swap_file"
  mkswap "$swap_file"
  swapon -v "$swap_file"
  SWAPCFG="swapDevices = [ { device = \"$swap_file\"; } ];"
}

remove_swap() {
  swapoff -a
  rm -vf /tmp/nixos-infect.*.swp
}

check_existing_swap() {
  if SWAPSHOW=$(swapon --show --noheadings --raw); then
    local swap_device="${SWAPSHOW%% *}"
    if [[ "$swap_device" == /dev/* ]]; then
      ZRAMS_SWAP=false
      SWAPCFG="swapDevices = [ { device = \"$swap_device\"; } ];"
      NO_SWAP=true
    fi
  fi
}

make_network_conf() {
  local eth0_name eth1_name
  eth0_name=$(ip -o link show | awk -F': ' '/^[0-9]+: /{print $2}' | head -n1)

  # Gather IP configurations
  mapfile -t eth0_ip4s < <(ip -4 addr show dev "$eth0_name" | grep 'inet ' | awk '{print "{ address=\"" $2 "\"; prefixLength=" $2" }"}')
  mapfile -t eth0_ip6s < <(ip -6 addr show dev "$eth0_name" | grep 'inet6 ' | awk '{print "{ address=\"" $2 "\"; prefixLength=" $2" }"}' || true)
  local gateway gateway6
  gateway=$(ip route show dev "$eth0_name" | awk '/default/ {print $3}')
  gateway6=$(ip -6 route show dev "$eth0_name" | awk '/default/ {print $3}' || echo "")

  local nameservers
  mapfile -t nameservers < <(grep ^nameserver /etc/resolv.conf | awk '{print "\"" $2 "\""}' | sed -e 's/^"127\..*"/"8.8.8.8"/' -e 's/^"::1"/"8.8.8.8"/')

  local predictable_inames
  if [[ "$eth0_name" == eth* ]]; then
    predictable_inames="usePredictableInterfaceNames = lib.mkForce false;"
  else
    predictable_inames="usePredictableInterfaceNames = lib.mkForce true;"
  fi

  cat > /etc/nixos/networking.nix << EOF
{ lib, ... }: {
  networking = {
    nameservers = [ ${nameservers[*]} ];
    defaultGateway = "${gateway}";
    defaultGateway6 = {
      address = "${gateway6}";
      interface = "${eth0_name}";
    };
    dhcpcd.enable = false;
    $predictable_inames
    interfaces = {
      $eth0_name = {
        ipv4.addresses = [ ${eth0_ip4s[*]} ];
        ipv6.addresses = [ ${eth0_ip6s[*]} ];
       
::contentReference[oaicite:0]{index=0}
 
